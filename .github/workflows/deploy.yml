name: Deploy & Distribution

on:
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Deployment target'
        required: true
        type: choice
        options:
          - npm
          - homebrew
          - docker
          - github-releases
          - all

env:
  NODE_VERSION: '18'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  build-binaries:
    name: Build Platform Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            ext: ''
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            ext: ''
          - os: windows-latest
            platform: win
            arch: x64
            ext: '.exe'
          - os: macos-latest
            platform: macos
            arch: x64
            ext: ''
          - os: macos-latest
            platform: macos
            arch: arm64
            ext: ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Install pkg globally
        run: npm install -g pkg

      - name: Create binary
        run: |
          pkg dist/cli/index.js \
            --targets node18-${{ matrix.platform }}-${{ matrix.arch }} \
            --output zodkit-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.ext }}

      - name: Test binary
        run: |
          if [ "${{ matrix.platform }}" != "win" ]; then
            chmod +x zodkit-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.ext }}
            ./zodkit-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.ext }} --version
          else
            ./zodkit-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.ext }} --version
          fi

      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.platform }}-${{ matrix.arch }}
          path: zodkit-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.ext }}
          retention-days: 30

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name == 'release'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        if: github.event_name == 'release'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM node:18-alpine AS builder

          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production

          COPY . .
          RUN npm run build

          FROM node:18-alpine AS runner

          RUN addgroup -g 1001 -S nodejs
          RUN adduser -S zodkit -u 1001

          WORKDIR /app
          COPY --from=builder /app/dist ./dist
          COPY --from=builder /app/node_modules ./node_modules
          COPY --from=builder /app/package.json ./package.json

          USER zodkit

          ENTRYPOINT ["node", "dist/cli/index.js"]
          CMD ["--help"]
          EOF

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/zodkit
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  npm-publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && contains(github.event.inputs.deployment_target, 'npm'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build project
        run: npm run build

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to GitHub Packages
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com'
          scope: '@${{ github.repository_owner }}'

      - name: Publish to GitHub Packages Registry
        run: |
          # Update package.json for GitHub Packages
          sed -i 's/"name": "zodkit"/"name": "@${{ github.repository_owner }}\/zodkit"/' package.json
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  homebrew-update:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: npm-publish
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && contains(github.event.inputs.deployment_target, 'homebrew'))

    steps:
      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Update Homebrew formula
        uses: dawidd6/action-homebrew-bump-formula@v3
        with:
          token: ${{ secrets.HOMEBREW_TOKEN }}
          formula: zodkit
          tag: ${{ github.ref }}
          revision: ${{ github.sha }}

  scoop-update:
    name: Update Scoop Bucket
    runs-on: ubuntu-latest
    needs: build-binaries
    if: github.event_name == 'release'

    steps:
      - name: Download Windows binary
        uses: actions/download-artifact@v3
        with:
          name: binaries-win-x64

      - name: Update Scoop bucket
        uses: ScoopInstaller/GithubActions@v1
        with:
          action: update-manifest
          bucket: your-scoop-bucket
          manifest: zodkit.json
          version: ${{ github.ref_name }}
          url: https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/zodkit-win-x64.exe

  chocolatey-update:
    name: Update Chocolatey Package
    runs-on: windows-latest
    needs: build-binaries
    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

      - name: Create Chocolatey package
        run: |
          $version = "${{ github.ref_name }}".TrimStart('v')

          mkdir chocolatey
          cd chocolatey

          # Create nuspec file
          @"
          <?xml version="1.0" encoding="utf-8"?>
          <package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
            <metadata>
              <id>zodkit</id>
              <version>$version</version>
              <packageSourceUrl>https://github.com/${{ github.repository }}</packageSourceUrl>
              <owners>JSONbored</owners>
              <title>Zodded</title>
              <authors>JSONbored</authors>
              <projectUrl>https://github.com/${{ github.repository }}</projectUrl>
              <docsUrl>https://github.com/${{ github.repository }}#readme</docsUrl>
              <bugTrackerUrl>https://github.com/${{ github.repository }}/issues</bugTrackerUrl>
              <tags>cli validation zod typescript schema</tags>
              <summary>A modern CLI tool for static analysis and validation of Zod schemas</summary>
              <description>Zodded is a CLI tool that provides static analysis and validation for Zod schemas in TypeScript projects.</description>
              <releaseNotes>https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}</releaseNotes>
            </metadata>
            <files>
              <file src="tools\**" target="tools" />
            </files>
          </package>
          "@ | Out-File -FilePath zodkit.nuspec -Encoding UTF8

          mkdir tools

          # Create install script
          @"
          `$packageName = 'zodkit'
          `$url = 'https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/zodkit-win-x64.exe'
          `$installDir = Join-Path `$env:ChocolateyInstall 'lib\zodkit\tools'

          Get-ChocolateyWebFile -PackageName `$packageName -FileFullPath "`$installDir\zodkit.exe" -Url `$url
          "@ | Out-File -FilePath tools\chocolateyinstall.ps1 -Encoding UTF8

      - name: Pack and push Chocolatey package
        run: |
          cd chocolatey
          choco pack
          choco push *.nupkg --source https://push.chocolatey.org/ --api-key ${{ secrets.CHOCOLATEY_API_KEY }}

  aur-update:
    name: Update AUR Package
    runs-on: ubuntu-latest
    needs: build-binaries
    if: github.event_name == 'release'

    steps:
      - name: Update AUR package
        uses: ATGardner/aur-update-action@v1
        with:
          package_name: zodkit
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}

  github-release:
    name: Update GitHub Release
    runs-on: ubuntu-latest
    needs: [build-binaries, docker-build]
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && contains(github.event.inputs.deployment_target, 'github-releases'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all binaries
        uses: actions/download-artifact@v3

      - name: Prepare release assets
        run: |
          mkdir release-assets

          # Copy all binaries
          find . -name "zodkit-*" -type f -exec cp {} release-assets/ \;

          # Create checksums
          cd release-assets
          sha256sum * > checksums.txt

          # Create installation script
          cat > install.sh << 'EOF'
          #!/bin/bash
          set -e

          # Detect OS and architecture
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m)

          case $ARCH in
            x86_64) ARCH="x64" ;;
            aarch64|arm64) ARCH="arm64" ;;
            *) echo "Unsupported architecture: $ARCH" && exit 1 ;;
          esac

          case $OS in
            linux) PLATFORM="linux" ;;
            darwin) PLATFORM="macos" ;;
            *) echo "Unsupported OS: $OS" && exit 1 ;;
          esac

          BINARY_NAME="zodkit-${PLATFORM}-${ARCH}"
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/latest/download/${BINARY_NAME}"

          echo "Downloading zodkit for ${PLATFORM}-${ARCH}..."
          curl -sL "$DOWNLOAD_URL" -o zodkit
          chmod +x zodkit

          # Try to install to /usr/local/bin
          if [ -w /usr/local/bin ]; then
            mv zodkit /usr/local/bin/
            echo "Installed zodkit to /usr/local/bin/"
          else
            echo "Moving zodkit to current directory (add to PATH manually)"
          fi

          zodkit --version
          EOF
          chmod +x install.sh

      - name: Update release with assets
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-deployment:
    name: Deployment Notifications
    runs-on: ubuntu-latest
    needs: [npm-publish, homebrew-update, github-release]
    if: always() && github.event_name == 'release'

    steps:
      - name: Send success notification
        if: needs.npm-publish.result == 'success' && needs.homebrew-update.result == 'success'
        run: |
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H 'Content-type: application/json' \
            --data '{
              "text": "🚀 Zodded ${{ github.ref_name }} successfully deployed to all platforms!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Zodded ${{ github.ref_name }} Deployment Complete* ✅\n\n• NPM: Published\n• Homebrew: Updated\n• GitHub Releases: Updated\n• Docker: Built and pushed"
                  }
                }
              ]
            }'

      - name: Send failure notification
        if: failure()
        run: |
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H 'Content-type: application/json' \
            --data '{
              "text": "❌ Zodded ${{ github.ref_name }} deployment failed!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Zodded ${{ github.ref_name }} Deployment Failed* ❌\n\nCheck the workflow logs: https://github.com/${{ github.repository }}/actions"
                  }
                }
              ]
            }'