name: Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'

jobs:
  generate-api-docs:
    name: Generate API Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g typedoc @typedoc/plugin-markdown

      - name: Build project
        run: npm run build

      - name: Generate TypeDoc documentation
        run: |
          typedoc src/index.ts \
            --out docs/api \
            --theme minimal \
            --plugin @typedoc/plugin-markdown \
            --readme README.md \
            --exclude "**/*.test.ts" \
            --exclude "**/*.spec.ts" \
            --excludePrivate \
            --excludeProtected \
            --hideGenerator

      - name: Generate CLI documentation
        run: |
          mkdir -p docs/cli

          # Generate help output for main command
          node dist/cli/index.js --help > docs/cli/main.txt

          # Generate help for subcommands
          for cmd in analyze validate init doctor check; do
            if node dist/cli/index.js $cmd --help > docs/cli/$cmd.txt 2>/dev/null; then
              echo "Generated docs for $cmd command"
            else
              echo "Command $cmd not found or no help available"
            fi
          done

      - name: Generate usage examples
        run: |
          mkdir -p docs/examples

          cat > docs/examples/basic-usage.md << 'EOF'
          # Basic Usage Examples

          ## Installation
          ```bash
          npm install -g zodkit
          ```

          ## Quick Start
          ```bash
          # Analyze all Zod schemas in your project
          zodkit analyze

          # Validate specific files
          zodkit validate src/**/*.ts

          # Watch mode for development
          zodkit validate --watch
          ```

          ## Configuration
          ```bash
          # Initialize configuration
          zodkit init

          # Use custom config
          zodkit analyze --config custom.config.js
          ```

          ## Output Formats
          ```bash
          # Pretty output (default)
          zodkit analyze --format pretty

          # JSON output for CI/CD
          zodkit analyze --format json

          # JUnit XML for test reporting
          zodkit analyze --format junit
          ```
          EOF

      - name: Create documentation index
        run: |
          cat > docs/index.md << 'EOF'
          # Zodded Documentation

          Welcome to the Zodded documentation! This CLI tool helps you analyze and validate Zod schemas in your TypeScript projects.

          ## Table of Contents

          - [API Reference](api/index.html) - Complete API documentation
          - [CLI Commands](cli/) - Command-line interface documentation
          - [Examples](examples/) - Usage examples and tutorials
          - [Configuration](../README.md#configuration) - Configuration options

          ## Quick Links

          - [GitHub Repository](https://github.com/your-username/zodkit)
          - [NPM Package](https://www.npmjs.com/package/zodkit)
          - [Issue Tracker](https://github.com/your-username/zodkit/issues)

          ## Getting Started

          1. Install Zodded: `npm install -g zodkit`
          2. Run in your project: `zodkit analyze`
          3. Check the results and fix any validation issues

          For detailed usage instructions, see the [CLI documentation](cli/).
          EOF

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/
          retention-days: 30

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: generate-api-docs
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download documentation
        uses: actions/download-artifact@v3
        with:
          name: documentation
          path: docs/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          enable_jekyll: false
          cname: zodkit.example.com

  validate-docs:
    name: Validate Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check README links
        run: |
          # Install markdown link checker
          npm install -g markdown-link-check

          # Check all markdown files
          find . -name "*.md" -not -path "./node_modules/*" -print0 | xargs -0 -I {} markdown-link-check {}

      - name: Validate API documentation completeness
        run: |
          # Build project first
          npm run build

          # Check if all public exports are documented
          echo "Checking API documentation completeness..."

          # Extract exports from built files
          find dist -name "*.js" -exec grep -l "exports\." {} \; | head -5

          # Check TypeScript exports
          grep -r "export " src/ --include="*.ts" | grep -v ".test.ts" | wc -l

      - name: Check documentation freshness
        run: |
          # Check if documentation files are newer than source files
          if [ -d docs/api ]; then
            echo "Documentation exists, checking freshness..."
            find src -name "*.ts" -newer docs/api/index.html | head -5
          else
            echo "No API documentation found"
          fi

      - name: Spell check documentation
        run: |
          # Install spell checker
          npm install -g cspell

          # Check spelling in markdown files
          cspell "**/*.md" --config .cspell.json || echo "Spell check completed with warnings"

  changelog:
    name: Update Changelog
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install -g conventional-changelog-cli

      - name: Generate changelog
        run: |
          # Generate changelog from commits
          conventional-changelog -p angular -i CHANGELOG.md -s

          # Add release information
          echo "## [${{ github.event.release.tag_name }}] - $(date +%Y-%m-%d)" >> CHANGELOG.tmp
          echo "" >> CHANGELOG.tmp
          echo "${{ github.event.release.body }}" >> CHANGELOG.tmp
          echo "" >> CHANGELOG.tmp
          cat CHANGELOG.md >> CHANGELOG.tmp
          mv CHANGELOG.tmp CHANGELOG.md

      - name: Commit changelog
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "docs: update changelog for ${{ github.event.release.tag_name }}" || exit 0
          git push

  wiki-sync:
    name: Sync Documentation to Wiki
    runs-on: ubuntu-latest
    needs: generate-api-docs
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout wiki
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}.wiki
          path: wiki/

      - name: Download documentation
        uses: actions/download-artifact@v3
        with:
          name: documentation
          path: docs/

      - name: Sync to wiki
        run: |
          # Copy documentation to wiki
          cp docs/examples/*.md wiki/ || echo "No examples to copy"
          cp docs/cli/*.txt wiki/ || echo "No CLI docs to copy"

          # Create wiki home page
          cat > wiki/Home.md << 'EOF'
          # Zodded Wiki

          Welcome to the Zodded wiki! This contains the latest documentation for the project.

          ## Pages

          - [Basic Usage Examples](basic-usage)
          - [CLI Commands](cli)
          - [Configuration Guide](configuration)

          ## External Links

          - [Full Documentation](https://zodkit.example.com)
          - [GitHub Repository](https://github.com/your-username/zodkit)
          EOF

          # Commit changes
          cd wiki/
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "docs: sync documentation from main branch" || exit 0
          git push