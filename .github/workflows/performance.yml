name: Performance Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly performance benchmarks
    - cron: '0 4 * * 1'

env:
  NODE_VERSION: '18'

jobs:
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Create test fixtures
        run: |
          mkdir -p test/fixtures/large-codebase
          for i in {1..100}; do
            cat > test/fixtures/large-codebase/schema-$i.ts << EOF
          import { z } from 'zod';

          export const Schema$i = z.object({
            id: z.string().uuid(),
            name: z.string().min(1).max(255),
            email: z.string().email(),
            age: z.number().min(0).max(150),
            tags: z.array(z.string()),
            metadata: z.record(z.any()),
            createdAt: z.string().datetime(),
            updatedAt: z.string().datetime().optional(),
            active: z.boolean().default(true)
          });

          export type Schema$i = z.infer<typeof Schema$i>;
          EOF
          done

      - name: Run performance benchmarks
        run: |
          echo "=== CLI Performance Tests ==="

          # Test 1: Schema discovery performance
          echo "Testing schema discovery..."
          time node dist/cli/index.js analyze test/fixtures/large-codebase --format json > perf-results-1.json

          # Test 2: Large file validation
          echo "Testing large file validation..."
          time node dist/cli/index.js validate examples/ --format json > perf-results-2.json

          # Test 3: Memory usage test
          echo "Testing memory usage..."
          /usr/bin/time -v node dist/cli/index.js analyze test/fixtures/large-codebase --format json 2> memory-usage.txt

          # Test 4: Concurrent processing
          echo "Testing concurrent processing..."
          time node dist/cli/index.js analyze test/fixtures/large-codebase --workers 4 --format json > perf-results-3.json

      - name: Analyze performance results
        run: |
          echo "=== Performance Analysis ==="

          # Extract timing information
          echo "Schema discovery time:" && grep "real" memory-usage.txt || echo "No timing data"
          echo "Memory usage:" && grep "Maximum resident" memory-usage.txt || echo "No memory data"

          # Check file sizes
          echo "Result file sizes:"
          ls -lh perf-results-*.json

          # Create performance report
          cat > performance-report.md << 'EOF'
          # Performance Test Results

          ## Test Environment
          - Node.js: ${{ env.NODE_VERSION }}
          - OS: Ubuntu Latest
          - Test Date: $(date)

          ## Results
          EOF

          echo "### Schema Discovery" >> performance-report.md
          echo '```' >> performance-report.md
          head -5 perf-results-1.json >> performance-report.md
          echo '```' >> performance-report.md

          echo "### Memory Usage" >> performance-report.md
          echo '```' >> performance-report.md
          cat memory-usage.txt >> performance-report.md
          echo '```' >> performance-report.md

      - name: Performance regression check
        run: |
          # Download previous benchmark if available
          if [ -f performance-baseline.json ]; then
            echo "Comparing against baseline..."
            # Add performance comparison logic here
          else
            echo "No baseline found, creating new baseline"
            echo '{"timestamp": "'$(date)'", "memory_kb": 0, "time_seconds": 0}' > performance-baseline.json
          fi

      - name: Upload performance artifacts
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            perf-results-*.json
            memory-usage.txt
            performance-report.md
            performance-baseline.json
          retention-days: 90

  load-test:
    name: Load Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Create massive test suite
        run: |
          mkdir -p test/fixtures/stress-test
          for i in {1..1000}; do
            mkdir -p test/fixtures/stress-test/module-$i
            cat > test/fixtures/stress-test/module-$i/types.ts << EOF
          import { z } from 'zod';

          export const UserSchema = z.object({
            id: z.string().uuid(),
            username: z.string().min(3).max(50),
            email: z.string().email(),
            profile: z.object({
              firstName: z.string(),
              lastName: z.string(),
              avatar: z.string().url().optional(),
              bio: z.string().max(500).optional()
            }),
            settings: z.object({
              theme: z.enum(['light', 'dark']),
              notifications: z.boolean(),
              privacy: z.enum(['public', 'private', 'friends'])
            }),
            posts: z.array(z.object({
              id: z.string().uuid(),
              title: z.string().min(1).max(200),
              content: z.string(),
              tags: z.array(z.string()),
              publishedAt: z.string().datetime()
            }))
          });
          EOF
          done

      - name: Run stress test
        run: |
          echo "Running stress test with 1000 modules..."
          timeout 300 node dist/cli/index.js analyze test/fixtures/stress-test --format json > stress-results.json || {
            echo "Stress test timed out or failed"
            exit 1
          }

      - name: Validate stress test results
        run: |
          if [ -s stress-results.json ]; then
            echo "Stress test completed successfully"
            wc -l stress-results.json
            echo "Sample output:"
            head -10 stress-results.json
          else
            echo "Stress test failed - no output generated"
            exit 1
          fi

  memory-profiling:
    name: Memory Profiling
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Install profiling tools
        run: |
          npm install -g clinic autocannon

      - name: Create memory test fixtures
        run: |
          mkdir -p test/fixtures/memory-test
          for i in {1..50}; do
            cat > test/fixtures/memory-test/complex-schema-$i.ts << EOF
          import { z } from 'zod';

          const BaseSchema = z.object({
            id: z.string().uuid(),
            timestamp: z.string().datetime(),
            metadata: z.record(z.unknown())
          });

          export const ComplexSchema$i = BaseSchema.extend({
            data: z.union([
              z.object({
                type: z.literal('user'),
                user: z.object({
                  name: z.string(),
                  email: z.string().email(),
                  preferences: z.array(z.object({
                    key: z.string(),
                    value: z.union([z.string(), z.number(), z.boolean()])
                  }))
                })
              }),
              z.object({
                type: z.literal('event'),
                event: z.object({
                  name: z.string(),
                  properties: z.record(z.union([z.string(), z.number(), z.boolean()])),
                  tags: z.array(z.string()).optional()
                })
              })
            ])
          });
          EOF
          done

      - name: Run memory profiling
        run: |
          # Profile with clinic
          clinic doctor --on-port 'node dist/cli/index.js analyze test/fixtures/memory-test --format json' || echo "Clinic profiling completed"

          # Profile with heapdump
          node --expose-gc --inspect dist/cli/index.js analyze test/fixtures/memory-test --format json &
          PID=$!
          sleep 5
          kill $PID || echo "Process already terminated"

      - name: Upload profiling results
        uses: actions/upload-artifact@v3
        with:
          name: memory-profiling
          path: |
            .clinic/
            *.heapsnapshot
          retention-days: 30